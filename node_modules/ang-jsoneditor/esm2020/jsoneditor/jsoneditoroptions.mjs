/* eslint-disable @typescript-eslint/ban-types */
export class JsonEditorOptions {
    constructor() {
        this.enableSort = true;
        this.enableTransform = true;
        this.escapeUnicode = false;
        this.expandAll = false;
        this.sortObjectKeys = false;
        this.history = true;
        this.mode = 'tree';
        this.search = true;
        this.indentation = 2;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbmVkaXRvcm9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvanNvbmVkaXRvci9qc29uZWRpdG9yb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpREFBaUQ7QUFlakQsTUFBTSxPQUFPLGlCQUFpQjtJQTBJNUI7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG5cbmV4cG9ydCB0eXBlIEpzb25FZGl0b3JNb2RlID0gJ3RyZWUnIHwgJ3ZpZXcnIHwgJ2Zvcm0nIHwgJ2NvZGUnIHwgJ3RleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25FZGl0b3JUcmVlTm9kZSB7XG4gIGZpZWxkOiBTdHJpbmcsXG4gIHZhbHVlOiBTdHJpbmcsXG4gIHBhdGg6IFN0cmluZ1tdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVycm9yIHtcbiAgcGF0aDogKHN0cmluZyB8IG51bWJlcilbXTtcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgSnNvbkVkaXRvck9wdGlvbnMge1xuICBwdWJsaWMgYWNlOiBhbnk7XG4gIHB1YmxpYyBhanY6IE9iamVjdDtcblxuXG4gIC8qKlxuICAgKiAgIHtmdW5jdGlvbn0gb25DaGFuZ2UgIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4gIG9uIGNoYW5nZSBvZiBjb250ZW50cy5cbiAgRG9lcyBub3QgcGFzcyB0aGUgY29udGVudHMgaXRzZWxmLlxuICBTZWUgYWxzbyBgb25DaGFuZ2VKU09OYCBhbmRcbiAgYG9uQ2hhbmdlVGV4dGAuXG4gICAqL1xuICBwdWJsaWMgb25DaGFuZ2U6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqICAgLy8ge2Z1bmN0aW9ufSBvbkNoYW5nZUpTT04gIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4vLyAgICAgaW4gbW9kZXMgb24gY2hhbmdlIG9mIGNvbnRlbnRzLFxuLy8gICAgIHBhc3NpbmcgdGhlIGNoYW5nZWQgY29udGVudHNcbi8vICAgICBhcyBKU09OLlxuLy8gICAgIE9ubHkgYXBwbGljYWJsZSBmb3IgbW9kZXNcbi8vICAgICAndHJlZScsICd2aWV3JywgYW5kICdmb3JtJy5cbiAgICovXG4gIHB1YmxpYyBvbkNoYW5nZUpTT046ICgpID0+IHZvaWQ7XG5cblxuICBwdWJsaWMgb25Ob2RlTmFtZTogKCkgPT4gdm9pZDtcbiAgcHVibGljIG9uQ3JlYXRlTWVudTogKGl0ZW1zOiBBcnJheTxhbnk+LCBub2RlOiBvYmplY3QpID0+IEFycmF5PGFueT47XG4gIHB1YmxpYyBvbkNvbG9yUGlja2VyOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAvLyB7ZnVuY3Rpb259IG9uQ2hhbmdlVGV4dCAgQ2FsbGJhY2sgbWV0aG9kLCB0cmlnZ2VyZWRcbiAgLy8gICAgIGluIG1vZGVzIG9uIGNoYW5nZSBvZiBjb250ZW50cyxcbiAgLy8gICAgIHBhc3NpbmcgdGhlIGNoYW5nZWQgY29udGVudHNcbiAgLy8gICAgIGFzIHN0cmluZ2lmaWVkIEpTT04uXG4gICAqL1xuICBwdWJsaWMgb25DaGFuZ2VUZXh0OiAoanNvbnN0cjogc3RyaW5nKSA9PiB2b2lkO1xuXG5cbiAgLyoqXG4gICAqICAge2Z1bmN0aW9ufSBvblNlbGVjdGlvbkNoYW5nZSBDYWxsYmFjayBtZXRob2QsXG4gIHRyaWdnZXJlZCBvbiBub2RlIHNlbGVjdGlvbiBjaGFuZ2VcbiAgT25seSBhcHBsaWNhYmxlIGZvciBtb2Rlc1xuICAndHJlZScsICd2aWV3JywgYW5kICdmb3JtJ1xuICAgKi9cbiAgcHVibGljIG9uU2VsZWN0aW9uQ2hhbmdlOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiAgICAge2Z1bmN0aW9ufSBvblRleHRTZWxlY3Rpb25DaGFuZ2UgQ2FsbGJhY2sgbWV0aG9kLFxuICB0cmlnZ2VyZWQgb24gdGV4dCBzZWxlY3Rpb24gY2hhbmdlXG4gIE9ubHkgYXBwbGljYWJsZSBmb3IgbW9kZXNcbiAgICovXG4gIHB1YmxpYyBvblRleHRTZWxlY3Rpb25DaGFuZ2U6ICgpID0+IHZvaWQ7XG5cblxuICAvKipcbiAgICogICAvLyB7ZnVuY3Rpb259IG9uRXZlbnQgQ2FsbGJhY2sgbWV0aG9kLCB0cmlnZ2VyZWRcbiAgICAvLyB3aGVuIGFuIGV2ZW50IG9jY3VycyBpblxuICAgIC8vIGEgSlNPTiBmaWVsZCBvciB2YWx1ZS5cbiAgICAvLyBPbmx5IGFwcGxpY2FibGUgZm9yXG4gICAgLy8gbW9kZXMgJ2Zvcm0nLCAndHJlZScgYW5kXG4gICAgLy8gJ3ZpZXcnXG4gICAqL1xuICBwdWJsaWMgb25FdmVudDogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogLy8gKiAgIHtmdW5jdGlvbn0gb25Gb2N1cyAgQ2FsbGJhY2sgbWV0aG9kLCB0cmlnZ2VyZWRcbi8vICB3aGVuIHRoZSBlZGl0b3IgY29tZXMgaW50byBmb2N1cyxcbi8vICBwYXNzaW5nIGFuIG9iamVjdCB7dHlwZSwgdGFyZ2V0fSxcbi8vICBBcHBsaWNhYmxlIGZvciBhbGwgbW9kZXNcbiAgICovXG4gIHB1YmxpYyBvbkZvY3VzOiAoKSA9PiB2b2lkO1xuXG4gIC8vICogICB7ZnVuY3Rpb259IG9uQmx1ciAgIENhbGxiYWNrIG1ldGhvZCwgdHJpZ2dlcmVkXG4gIC8vICB3aGVuIHRoZSBlZGl0b3IgZ29lcyBvdXQgb2YgZm9jdXMsXG4gIC8vICBwYXNzaW5nIGFuIG9iamVjdCB7dHlwZSwgdGFyZ2V0fSxcbiAgLy8gIEFwcGxpY2FibGUgZm9yIGFsbCBtb2Rlc1xuICBwdWJsaWMgb25CbHVyOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiAgLy8gKiAgIHtmdW5jdGlvbn0gb25DbGFzc05hbWUgQ2FsbGJhY2sgbWV0aG9kLCB0cmlnZ2VyZWRcbi8vIHdoZW4gYSBOb2RlIERPTSBpcyByZW5kZXJlZC4gRnVuY3Rpb24gcmV0dXJuc1xuLy8gYSBjc3MgY2xhc3MgbmFtZSB0byBiZSBzZXQgb24gYSBub2RlLlxuLy8gT25seSBhcHBsaWNhYmxlIGZvclxuLy8gbW9kZXMgJ2Zvcm0nLCAndHJlZScgYW5kXG4vLyAndmlldydcbiAgICovXG4gIHB1YmxpYyBvbkNsYXNzTmFtZTogKG5vZGU6IEpzb25FZGl0b3JUcmVlTm9kZSkgPT4gdm9pZDtcblxuICBwdWJsaWMgb25FZGl0YWJsZTogKG5vZGU6IEpzb25FZGl0b3JUcmVlTm9kZSB8IHt9KSA9PiBib29sZWFuIHwgeyBmaWVsZDogYm9vbGVhbiwgdmFsdWU6IGJvb2xlYW4gfTtcblxuICAvKipcbiAgICogICB7ZnVuY3Rpb259IG9uRXJyb3IgICBDYWxsYmFjayBtZXRob2QsIHRyaWdnZXJlZFxuICB3aGVuIGFuIGVycm9yIG9jY3Vyc1xuICAgKi9cbiAgcHVibGljIG9uRXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkO1xuICBwdWJsaWMgb25Nb2RlQ2hhbmdlOiAobmV3TW9kZTogSnNvbkVkaXRvck1vZGUsIG9sZE1vZGU6IEpzb25FZGl0b3JNb2RlKSA9PiB2b2lkO1xuICBwdWJsaWMgb25WYWxpZGF0ZTogKGpzb246IE9iamVjdCkgPT4gSUVycm9yW107XG4gIHB1YmxpYyBvblZhbGlkYXRpb25FcnJvcjogKGVycm9yczogb2JqZWN0W10pID0+IHZvaWQ7XG5cbiAgcHVibGljIGVuYWJsZVNvcnQ6IGJvb2xlYW47XG4gIHB1YmxpYyBlbmFibGVUcmFuc2Zvcm06IGJvb2xlYW47XG4gIHB1YmxpYyBlc2NhcGVVbmljb2RlOiBib29sZWFuO1xuICBwdWJsaWMgZXhwYW5kQWxsOiBib29sZWFuO1xuICBwdWJsaWMgc29ydE9iamVjdEtleXM6IGJvb2xlYW47XG4gIHB1YmxpYyBoaXN0b3J5OiBib29sZWFuO1xuICBwdWJsaWMgbW9kZTogSnNvbkVkaXRvck1vZGU7XG4gIHB1YmxpYyBtb2RlczogSnNvbkVkaXRvck1vZGVbXTtcbiAgcHVibGljIG5hbWU6IFN0cmluZztcbiAgcHVibGljIHNjaGVtYTogT2JqZWN0O1xuICBwdWJsaWMgc2VhcmNoOiBib29sZWFuO1xuICBwdWJsaWMgaW5kZW50YXRpb246IE51bWJlcjtcbiAgcHVibGljIHRlbXBsYXRlczogT2JqZWN0O1xuICBwdWJsaWMgdGhlbWU6IE51bWJlcjtcbiAgcHVibGljIGxhbmd1YWdlOiBTdHJpbmc7XG4gIHB1YmxpYyBsYW5ndWFnZXM6IE9iamVjdDtcblxuICAvKipcbiAgICogQWRkcyBtYWluIG1lbnUgYmFyIC0gQ29udGFpbnMgZm9ybWF0LCBzb3J0LCB0cmFuc2Zvcm0sIHNlYXJjaCBldGMuIGZ1bmN0aW9uYWxpdHkuIFRydWVcbiAgICogYnkgZGVmYXVsdC4gQXBwbGljYWJsZSBpbiBhbGwgdHlwZXMgb2YgbW9kZS5cbiAgICovXG4gIHB1YmxpYyBtYWluTWVudUJhcjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkcyBuYXZpZ2F0aW9uIGJhciB0byB0aGUgbWVudSAtIHRoZSBuYXZpZ2F0aW9uIGJhciB2aXN1YWxpemUgdGhlIGN1cnJlbnQgcG9zaXRpb24gb25cbiAgICogdGhlIHRyZWUgc3RydWN0dXJlIGFzIHdlbGwgYXMgYWxsb3dzIGJyZWFkY3J1bWJzIG5hdmlnYXRpb24uXG4gICAqIFRydWUgYnkgZGVmYXVsdC5cbiAgICogT25seSBhcHBsaWNhYmxlIHdoZW4gbW9kZSBpcyAndHJlZScsICdmb3JtJyBvciAndmlldycuXG4gICAqL1xuICBwdWJsaWMgbmF2aWdhdGlvbkJhcjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkcyBzdGF0dXMgYmFyIHRvIHRoZSBib3R0b20gb2YgdGhlIGVkaXRvciAtIHRoZSBzdGF0dXMgYmFyIHNob3dzIHRoZSBjdXJzb3IgcG9zaXRpb25cbiAgICogYW5kIGEgY291bnQgb2YgdGhlIHNlbGVjdGVkIGNoYXJhY3RlcnMuXG4gICAqIFRydWUgYnkgZGVmYXVsdC5cbiAgICogT25seSBhcHBsaWNhYmxlIHdoZW4gbW9kZSBpcyAnY29kZScgb3IgJ3RleHQnLlxuICAgKi9cbiAgcHVibGljIHN0YXR1c0JhcjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmVuYWJsZVNvcnQgPSB0cnVlO1xuICAgIHRoaXMuZW5hYmxlVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICB0aGlzLmVzY2FwZVVuaWNvZGUgPSBmYWxzZTtcbiAgICB0aGlzLmV4cGFuZEFsbCA9IGZhbHNlO1xuICAgIHRoaXMuc29ydE9iamVjdEtleXMgPSBmYWxzZTtcbiAgICB0aGlzLmhpc3RvcnkgPSB0cnVlO1xuICAgIHRoaXMubW9kZSA9ICd0cmVlJztcbiAgICB0aGlzLnNlYXJjaCA9IHRydWU7XG4gICAgdGhpcy5pbmRlbnRhdGlvbiA9IDI7XG4gIH1cbn1cbiJdfQ==